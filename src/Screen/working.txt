import React, { useEffect, useState } from 'react';
import { View, StyleSheet, TextInput, Text, Alert, TouchableOpacity } from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import { locationPermission, getCurrentLocation } from '../Helperfuncton/Helperfun';

export const NewPlaces = () => {
  useEffect(() => {
    getLiveLocation();
  }, []);

  const [region, setRegion] = useState({
    latitude: 22.332671112167628,
    longitude: 91.84030073971839,
    latitudeDelta: 0.002,
    longitudeDelta: 0.001,
  });

  const [markerPosition, setMarkerPosition] = useState({
    latitude: 22.332671112167628,
    longitude: 91.84030073971839,
  });

  const getLiveLocation = async () => {
    try {
      const locPerssionDenied = await locationPermission();
      if (locPerssionDenied) {
        const { latitude, longitude } = await getCurrentLocation();
        setRegion({
          latitude,
          longitude,
          latitudeDelta: 0.002,
          longitudeDelta: 0.001,
        });
        setMarkerPosition({
          latitude,
          longitude,
        });
      }
    } catch (error) {
      Alert.alert(
        'Error getting location permission',
        error.message,
        [{ text: 'OK', onPress: getLiveLocation }],
      );
    }
  };

  const onMarkerDragEnd = (e) => {
    const { latitude, longitude } = e.nativeEvent.coordinate;
    setMarkerPosition({ latitude, longitude });
    console.log('Marker dragged:', latitude, longitude);
  };

  const onMapPress = (e) => {
    // Set marker position to the pressed location
    const { latitude, longitude } = e.nativeEvent.coordinate;
    setMarkerPosition({ latitude, longitude });
    console.log('Marker dragged:', latitude, longitude);
  };

  return (
    <View style={{ flex: 1 }}>
      <MapView
        style={{ flex: 1, height: '50%', width: '100%' }}
        initialRegion={region}
        onPress={onMapPress}
      >
        <Marker
          coordinate={markerPosition}
          title="Drag Me!"
          description="Your Location"
          draggable
          onDragEnd={onMarkerDragEnd}
        />
      </MapView>
    </View>
  );
};

const styles = StyleSheet.create({});






import React, { useState } from 'react';
import { View, StyleSheet, Text, TextInput, KeyboardAvoidingView,Platform } from 'react-native';
import { Google_API } from '../Constrains/GoogleApi';
import { Button } from 'react-native-paper';


export const AddressPickup = ({ placeholderText, fetchAddress }) => {
  const [address, setAddress] = useState('');

  const onPressAddress = async () => {
    try {
      // Encode the address to make it URL-safe
      const encodedAddress = encodeURIComponent(address);

      // Replace 'YOUR_GOOGLE_MAPS_API_KEY' with your actual API key
      const apiKey = Google_API;

      const response = await fetch(
        `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}&key=${apiKey}`
      );

      if (!response.ok) {
        throw new Error('Error fetching location data');
      }

      const data = await response.json();

      if (data.results && data.results.length > 0) {
        const location = data.results[0].geometry.location;
        const { lat, lng } = location;
        console.log(`Latitude: ${lat}, Longitude: ${lng}`);
        fetchAddress(lat, lng);
      } else {
        console.error('No results found for the given address');
      }
    } catch (error) {
      console.error('Error getting location data:', error);
    }
  };
  const keyboardAvoidingViewHeight = address ? '20%' : '10%';
  return (
   
      <View style={{ height:'10%',flexDirection:"row" }}>
        <TextInput
          style={styles.textInputStyle}
          placeholder={placeholderText}
          value={address}
          onChangeText={setAddress}
          onEndEditing={() => console.log("User finished editing")}
          
        />
        <Button mode="contained"
          onPress={onPressAddress}
          style={{ height: 50, width:'30%' }}
        >
          Press me
        </Button>
      </View>
    

  );
};

const styles = StyleSheet.create({
  textInputStyle: {
    height: 48,
    color: 'black',
    fontSize: 16,
    backgroundColor: '#F395F3',
    marginBottom: 10,
    paddingLeft: 10,
  
  },
});

